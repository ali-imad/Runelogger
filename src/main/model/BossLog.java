package model;

import java.util.ArrayList;

/*
    The master BossLog that handles entry addition and removal, initializing and handling various Boss
    objects to store the KillEntry's in.
 */
public class BossLog {
    private final ArrayList<Boss> bosses;
    private final ArrayList<KillEntry> kills;  // store all the entries generated by BossLog

    // EFFECTS: initialize the application with Vorkath, Giant Mole, and Zulrah available for logging
    public BossLog() {
        this.bosses = new ArrayList<>();
        this.kills = new ArrayList<>();
        Boss vorkath = new Boss("Vorkath");
        Boss giantMole = new Boss("Giant Mole");
        Boss zulrah = new Boss("Zulrah");
        this.bosses.add(vorkath);
        this.bosses.add(giantMole);
        this.bosses.add(zulrah);
    }

    // REQUIRES: this.kills.size() < i
    // MODIFIES: this.boss.get(i), this.kills
    // EFFECTS: Generate and add a new entry to the BossLog, updating the appropriate boss
    public void addNewEntry(int bossIdx, int time, int value) {
        Boss boss = this.bosses.get(bossIdx);
        KillEntry newEntry = new KillEntry(boss, time, value);
        boss.add(newEntry);
        this.kills.add(newEntry);
    }

    // EFFECTS: Returns a readonly array of the bosses to reference
    public Boss[] getBosses() {
        return this.bosses.toArray(new Boss[0]);
    }

    // REQUIRES: this.kills.size() < x
    // EFFECTS: Get an entry at a specific index
    public KillEntry getEntry(int x) {
        return this.kills.get(x);
    }

    // REQUIRES: this.kills.size() < i
    // MODIFIES: this.boss.get(i), this.kills
    // EFFECTS: Remove an entry from the BossLog
    public void removeEntry(int i) {
        KillEntry entry = getEntry(i);
        entry.getBoss().removeEntry(entry);
        this.kills.remove(entry);
    }

    // REQUIRES: this.kills.size() < x
    // EFFECTS: Return an entry from the end, where x is the index offset fro the end
    //          (2 would be 2 indexes away from the end)
    public KillEntry getFromEnd(int x) {
        return this.kills.get(this.kills.size() - 1 - x);
    }

    // EFFECTS: Returns the total number of logged kills
    public int getTotalKills() {
        return this.kills.size();
    }
}
