package model.persistence;

import model.BossLog;
import org.json.JSONObject;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.stream.Stream;

// Represents a reader object that parses the JSON file generated by JsonWriter to restore the state of a BossLog
// object
public class JsonReader {
    private String src;

    // EFFECTS: constructs reader to read from source file
    public JsonReader(String source) {
        this.src = source;
    }

    // EFFECTS: reads workroom from file and returns it;
    // throws IOException if an error occurs reading data from file
    public BossLog read() throws IOException {
        String jsonData = readFile(this.src);
        JSONObject jsonObject = new JSONObject(jsonData);
        return parseLog(jsonObject);
    }

    private BossLog parseLog(JSONObject jsonObject) {
        BossLog log = new BossLog();
        addEntries(log, jsonObject);
        return log;
    }

    // MODIFIES: log
    // EFFECTS: Parse each entry in the json object and generate log entries sequentially
    private void addEntries(BossLog log, JSONObject jsonObject) {
        for (Object json : jsonObject.getJSONArray("kills")) {
            JSONObject nextObject = (JSONObject) json;
            String bossName = nextObject.getString("killed");
            log.addNewEntryByName(bossName, nextObject.getInt("time"), nextObject.getInt("value"));
        }
    }

    // EFFECTS: reads source file as string and returns it
    private String readFile(String source) throws IOException {
        StringBuilder contentBuilder = new StringBuilder();

        try (Stream<String> stream = Files.lines( Paths.get(source), StandardCharsets.UTF_8)) {
            stream.forEach(s -> contentBuilder.append(s));
        }

        return contentBuilder.toString();
    }
}
